/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Telephone,
  TelephoneInterface,
} from "../../../telephone/Telephone.sol/Telephone";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905560ee806100316000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063a6f9dae1146065575b600080fd5b6000546049906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6074607036600460b3565b6076565b005b32331460b057600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790555b50565b60006020828403121560c457600080fd5b81356001600160a01b038116811460da57600080fd5b939250505056fea164736f6c634300080d000a";

type TelephoneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TelephoneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Telephone__factory extends ContractFactory {
  constructor(...args: TelephoneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Telephone> {
    return super.deploy(overrides || {}) as Promise<Telephone>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Telephone {
    return super.attach(address) as Telephone;
  }
  override connect(signer: Signer): Telephone__factory {
    return super.connect(signer) as Telephone__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TelephoneInterface {
    return new utils.Interface(_abi) as TelephoneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Telephone {
    return new Contract(address, _abi, signerOrProvider) as Telephone;
  }
}
