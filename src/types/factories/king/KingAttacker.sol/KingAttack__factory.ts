/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  KingAttack,
  KingAttackInterface,
} from "../../../king/KingAttacker.sol/KingAttack";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "target",
        type: "address",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561028a806100326000396000f3fe6080604052600436106100225760003560e01c80634b64e4921461012a57600080fd5b36610125576001546000036100675734600181905550610042333461013d565b6100655760005461005c906001600160a01b03163461013d565b61006557600080fd5b005b6001543410156100be5760405162461bcd60e51b815260206004820152600c60248201527f7768657265206d6f6e65793f000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006001819055546100d9906001600160a01b03163461013d565b6100655760405162461bcd60e51b815260206004820152600d60248201527f7061796f7574206661696c65640000000000000000000000000000000000000060448201526064016100b5565b600080fd5b61006561013836600461024d565b610199565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461018a576040519150601f19603f3d011682016040523d82523d6000602084013e61018f565b606091505b5090949350505050565b6001600160a01b0381166101ef5760405162461bcd60e51b815260206004820152600a60248201527f626164207461726765740000000000000000000000000000000000000000000060448201526064016100b5565b6000341161023f5760405162461bcd60e51b815260206004820152600860248201527f6e6565642065746800000000000000000000000000000000000000000000000060448201526064016100b5565b610249813461013d565b5050565b60006020828403121561025f57600080fd5b81356001600160a01b038116811461027657600080fd5b939250505056fea164736f6c634300080d000a";

type KingAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KingAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KingAttack__factory extends ContractFactory {
  constructor(...args: KingAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<KingAttack> {
    return super.deploy(overrides || {}) as Promise<KingAttack>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): KingAttack {
    return super.attach(address) as KingAttack;
  }
  override connect(signer: Signer): KingAttack__factory {
    return super.connect(signer) as KingAttack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KingAttackInterface {
    return new utils.Interface(_abi) as KingAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KingAttack {
    return new Contract(address, _abi, signerOrProvider) as KingAttack;
  }
}
